//------------------------------------------------------------------------------
//  Генератор правил для контейнера
//------------------------------------------------------------------------------

$screen-m:      0 !default;
$screen-t:      576px !default;
$screen-ti:     768px !default;
$screen-tl:     992px !default;
$screen-d:      1280px !default;
$screen-dl:     1440px !default;
$screen-dxl:    1680px !default;

$container-m:   100% !default;
$container-t:   560px !default;
$container-ti:  720px !default;
$container-tl:  960px !default;
$container-d:   1200px !default;
$container-dl:  1400px !default;
$container-dxl: 1600px !default;

$grid-columns: 12 !default;
$grid-gutter-width: 2rem !default;

@mixin container(
	$m-grid-gutter:  3rem,
	$t-grid-gutter:  $grid-gutter-width,
	$ti-grid-gutter:  $grid-gutter-width,
	$tl-grid-gutter:  $grid-gutter-width,
	$d-grid-gutter:  $grid-gutter-width,
	$dl-grid-gutter:  $grid-gutter-width,
	$dxl-grid-gutter:  $grid-gutter-width
) {
	display: block;
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	@if ($m-grid-gutter != 0) {
		padding-left: calc($m-grid-gutter / 2);
		padding-right: calc($m-grid-gutter / 2);
	}
	@media (min-width: $screen-t) {
		width: $container-t;
		@if ($t-grid-gutter != $m-grid-gutter) {
			padding-left: calc($t-grid-gutter / 2);
			padding-right: calc($t-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-ti) {
		width: $container-ti;
		@if ($ti-grid-gutter != $t-grid-gutter) {
			padding-left: calc($ti-grid-gutter / 2);
			padding-right: calc($ti-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-tl) {
		width: $container-tl;
		@if ($tl-grid-gutter != $ti-grid-gutter) {
			padding-left: calc($tl-grid-gutter / 2);
			padding-right: calc($tl-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-d) {
		width: $container-d;
		@if ($d-grid-gutter != $tl-grid-gutter) {
			padding-left: calc($d-grid-gutter / 2);
			padding-right: calc($d-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-d) {
		width: $container-d;
		@if ($d-grid-gutter != $tl-grid-gutter) {
			padding-left: calc($d-grid-gutter / 2);
			padding-right: calc($d-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-dl) {
		width: $container-dl;
		@if ($dl-grid-gutter != $d-grid-gutter) {
			padding-left: calc($dl-grid-gutter / 2);
			padding-right: calc($dl-grid-gutter / 2);
		}
	}
	@media (min-width: $screen-dxl) {
		width: $container-dxl;
		@if ($dxl-grid-gutter != $dl-grid-gutter) {
			padding-left: calc($dxl-grid-gutter / 2);
			padding-right: calc($dxl-grid-gutter / 2);
		}
	}
}
//------------------------------------------------------------------------------
//  Генератор правил для прямого родителя модульной сетки
//------------------------------------------------------------------------------
//  Принимает:         По умолчанию:        Пояснение:
//  $xs-grid-gutter:   $grid-gutter-width   промежуток между ячейками XS-сетки
//  $sm-grid-gutter:   $grid-gutter-width   промежуток между ячейками SM-сетки
//  $md-grid-gutter:   $grid-gutter-width   промежуток между ячейками MD-сетки
//  $lg-grid-gutter:   $grid-gutter-width   промежуток между ячейками LG-сетки
//  $xl-grid-gutter:   $grid-gutter-width   промежуток между ячейками XL-сетки
//------------------------------------------------------------------------------
// Пример вызова:
// .some-class {
//   @include row (
//     $xs-grid-gutter:  $grid-gutter-width, // отступ по умолчанию
//     $sm-grid-gutter:  0,                  // нет отступа
//     $md-grid-gutter:  $grid-gutter-width  // отступ по умолчанию
//   );
// }
//
// Идентичный вызов:
// .some-class {
//   @include row ( $grid-gutter-width, 0, $grid-gutter-width );
// }
//------------------------------------------------------------------------------
@mixin row(
	$m-grid-gutter:  $grid-gutter-width,
	$t-grid-gutter:  $grid-gutter-width,
	$ti-grid-gutter:  $grid-gutter-width,
	$tl-grid-gutter:  $grid-gutter-width,
	$d-grid-gutter:  $grid-gutter-width,
	$dl-grid-gutter:  $grid-gutter-width,
	$dxl-grid-gutter:  $grid-gutter-width
) {
	display: flex;
	flex-wrap: wrap;
	& > * {
		flex-basis: 100%;
	}
	@if ($m-grid-gutter != 0) {
		margin-left: calc($m-grid-gutter / -2);
		margin-right: calc($m-grid-gutter / -2);
	}
	@if ($t-grid-gutter != $m-grid-gutter) {
		@media (min-width: $screen-t) {
			margin-left: calc($t-grid-gutter / -1);
			margin-right: calc($t-grid-gutter / -1);
		}
	}
	@if ($ti-grid-gutter != $t-grid-gutter) {
		@media (min-width: $screen-ti) {
			margin-left: calc($ti-grid-gutter / -1);
			margin-right: calc($ti-grid-gutter / -1);
		}
	}
	@if ($tl-grid-gutter != $ti-grid-gutter) {
		@media (min-width: $screen-tl) {
			margin-left: calc($tl-grid-gutter / -1);
			margin-right: calc($tl-grid-gutter / -1);
		}
	}
	@if ($d-grid-gutter != $tl-grid-gutter) {
		@media (min-width: $screen-d) {
			margin-left: calc($d-grid-gutter / -1);
			margin-right: calc($d-grid-gutter / -1);
		}
	}
	@if ($dl-grid-gutter != $d-grid-gutter) {
		@media (min-width: $screen-dl) {
			margin-left: calc($dl-grid-gutter / -1);
			margin-right: calc($dl-grid-gutter / -1);
		}
	}
	@if ($dxl-grid-gutter != $dl-grid-gutter) {
		@media (min-width: $screen-dxl) {
			margin-left: calc($dxl-grid-gutter / -1);
			margin-right: calc($dxl-grid-gutter / -1);
		}
	}
}
//------------------------------------------------------------------------------
//  Генератор ширины ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок в этой ячейке)
//  $columns:     $grid-columns;        количество ячеек в ряду
//
//  Возвращает width.
//------------------------------------------------------------------------------
@mixin get-width($column: 1, $columns: $grid-columns) {
	$width: calc(100% / $columns) * $column;
	flex: 0 0 $width;
	max-width: $width;
}
//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $column:      1                     ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------
@mixin make-col(
	$column:  1,
	$columns: $grid-columns,
	$gutter:  $grid-gutter-width
) {
	@include get-width($column, $columns);
	// ВНИМАНИЕ!
	// если $gutter == false, в CSS не попадут правила padding-left и padding-right
	@if ($gutter != false) {
		padding-left: calc($gutter / 2);
		padding-right: calc($gutter / 2);
	}
}
//------------------------------------------------------------------------------
//  Генератор правил для одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      $grid-columns         ширина (кол-во колонок для этой ячейки)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//  $gutter:      $grid-gutter-width    промежуток между ячейками
//------------------------------------------------------------------------------
@mixin col(
	$screen:  m,
	$column:  $grid-columns,
	$columns: $grid-columns,
	$gutter:  $grid-gutter-width
) {
	@if ($screen == m) {
		@include make-col($column, $columns, $gutter);
	}
	@if ($screen == t) {
		@media (min-width: $screen-t) {
			@include make-col($column, $columns, $gutter);
		}
	}
	@if ($screen == ti) {
		@media (min-width: $screen-ti) {
			@include make-col($column, $columns, $gutter);
		}
	}
	@if ($screen == tl) {
		@media (min-width: $screen-tl) {
			@include make-col($column, $columns, $gutter);
		}
	}
	@if ($screen == d) {
		@media (min-width: $screen-d) {
			@include make-col($column, $columns, $gutter);
		}
	}
	@if ($screen == dl) {
		@media (min-width: $screen-dl) {
			@include make-col($column, $columns, $gutter);
		}
	}
	@if ($screen == dxl) {
		@media (min-width: $screen-dxl) {
			@include make-col($column, $columns, $gutter);
		}
	}
}
//------------------------------------------------------------------------------
//  Генератор правил для отступа одной ячейки с возможностью указать @media
//------------------------------------------------------------------------------
//  Принимает:    По умолчанию:         Пояснение:
//  $screen:      xs                    тип сетки [xs|sm|md|lg|xl|xxl]
//  $column:      1                     ширина отступа (кол-во колонок)
//  $columns:     $grid-columns;        общее количество ячеек на 1 ряд
//------------------------------------------------------------------------------
@mixin col-offset(
	$screen: m,
	$column: 1,
	$columns: $grid-columns
) {
	@if ($screen == m) {
		margin-left: calc($column * 100% / $columns);
	}
	@if ($screen == t) {
		@media (min-width: $screen-t) {
			margin-left: calc($column * 100% / $columns);
		}
	}
	@if ($screen == ti) {
		@media (min-width: $screen-ti) {
			margin-left: calc($column * 100% / $columns);
		}
	}
	@if ($screen == tl) {
		@media (min-width: $screen-tl) {
			margin-left: calc($column * 100% / $columns);
		}
	}
	@if ($screen == d) {
		@media (min-width: $screen-d) {
			margin-left: calc($column * 100% / $columns);
		}
	}
	@if ($screen == dl) {
		@media (min-width: $screen-dl) {
			margin-left: calc($column * 100% / $columns);
		}
	}
	@if ($screen == dxl) {
		@media (min-width: $screen-dxl) {
			margin-left: calc($column * 100% / $columns);
		}
	}
}
